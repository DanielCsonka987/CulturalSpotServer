{"version":3,"sources":["reportWebVitals.js","utils/dataConverting.js","utils/dataRevision.js","utils/localStorageProc.js","utils/authorization.js","utils/myHookFunctions.js","components/generalForm/InputUnit.js","components/generalForm/ErrorUnit.js","pages/LoginPage.js","pages/RegisterPage.js","components/outContent/PwdResetStage1.js","components/outContent/PwdResetStage2.js","components/outContent/PwdResetStage3.js","pages/PwdResetPage.js","components/outContent/WellcomeContent.js","components/inContent/LogoutProcess.js","components/inContent/ReviewContent.js","components/inContent/ChatsList.js","components/inContent/MyAccount.js","components/inContent/FriendsList.js","components/inContent/PostsList.js","pages/ServerErrorPage.js","pages/HomePage.js","components/Navigation.js","App.js","ApolloProvider.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","convertExpiration_IntSecToIntMiliSec","tokenExpireInSecInt","Date","now","localFormDataRevisions","values","criterias","errObj","field","message","crit","res","methodsForCriterias","push","unAnalyzer","RegExp","pwdAnalyzer","emailAnalyzer","email","vls","parts","split","reverse","length","test","username","password","passwordconf","revisePasswordResetToken","token","inputID","tokenParts","persistLocalCredentials","labels","i","localStorage","setItem","clearAllLocalCredentials","removeItem","removeLocalCredentials","initAuthState","user","newContent","FETCH_USER_DETAILS","gql","AuthContext","createContext","srvErrMessage","backPageURL","login","userData","logout","setSrvError","errorMsg","setBackPageURL","url","authReducer","state","action","type","payload","AuthorizationProvider","props","useReducer","authState","dispatch","useLazyQuery","onCompleted","data","requireClientContent","onError","err","console","log","refetchUserDatas","called","useEffect","refreshToken","getItem","expireDate","Object","includes","didUserDatasPersistLocally","Provider","value","tokenExpire","persistAllEssentialCredentials","children","useFormUsageActions","initValues","callbackAtSending","useState","setFormValues","onSubmit","event","preventDefault","onChange","target","name","clearFields","useFormErrorActions","errors","setSomeError","resetErrors","setValidationErrors","setGeneralErrors","errMsg","useLogRestriction","logstatePreferation","destinAtRestrict","history","useHistory","userContext","useContext","InputUnit","labeling","funcChange","errorHere","invalidInputs","ErrorUnit","text","LOGIN_USER","LoginPage","userFormValidationCrit","clientErrors","loginProcess","useMutation","update","_","userLogDatas","variables","loading","to","onClick","map","index","REGISTER_USER","RegisterPage","useFormRevisionCrit","createUser","registration","PwdResetStage1","resetStp1Process","RESET_PWD1","resetPasswordStep1","PwdResetStage2","destinAtError","progPrevDestin","cookies","document","cookie","cookieErrorMsg","find","row","startsWith","txtToRender","join","replace","useCookieErrorReport","routeHistory","routeParam","useParams","resetPasswordStep3","context","headers","resetting","passwordConfirm","PwdResetStage3","PwdResetPage","useRouteMatch","path","from","WellcomeContent","LogoutProcess","ReviviewContent","ChatsList","MyAccount","FriendsList","PostsList","ServerErrorPage","clickAction","e","HomePage","component","FriendList","exact","Navigation","useLocation","pathname","firstPathUnit","active","toLowerCase","App","className","httpLink","createHttpLink","uri","headerSetting","ApolloLink","operation","forward","getContext","setContext","refreshing","authorization","headerAbsorb","client","ApolloClient","link","cache","InMemoryCache","ApolloProvider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8ebe3b81.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\n/** __For expiration time resolving__ */\r\nexport const convertExpiration_StrToInt = (tokenExpireInStr)=>{\r\n    try{\r\n        return Number.parseInt(tokenExpireInStr) \r\n    }catch(err){\r\n        return 0    //this case, makes expiration true\r\n    }\r\n}\r\n\r\n/** __For exiration time persistence__ */\r\nexport const convertExpiration_IntSecToIntMiliSec = (tokenExpireInSecInt)=>{\r\n    return Date.now() + (tokenExpireInSecInt * 1000)\r\n}\r\n\r\n\r\n","\r\nexport const localFormDataRevisions = (values, criterias)=>{\r\n\r\n    const errObj = { field: [], message: [] }\r\n    for(const crit of criterias){\r\n\r\n        const res = methodsForCriterias[crit](values)\r\n        if(res){\r\n            errObj.field.push(crit)\r\n            errObj.message.push(res)\r\n        }\r\n\r\n    }\r\n    return errObj\r\n}\r\n\r\nconst unAnalyzer = new RegExp('[a-zA-Z0-9_ ]{4,}');\r\nconst pwdAnalyzer = new RegExp('.{6,}');\r\nconst emailAnalyzer = new RegExp('^[a-z0-9._]{3,}@[a-z]{3,}\\.{1}[a-z]{2,3}$')\r\n\r\nconst methodsForCriterias = {\r\n    email: (vls)=>{\r\n        const parts = vls.email.split('.').reverse()\r\n        if(parts[0].length < 2 || parts[0].length > 3 ){\r\n            return 'Not acceptable email!';\r\n        }\r\n        if(!emailAnalyzer.test(vls.email)){\r\n            return 'Not acceptable email!'\r\n        }\r\n        return ''\r\n    },\r\n    username: (vls)=>{\r\n        if(vls.username.length > 50){\r\n            return 'Too long username!'\r\n        } \r\n        if(!unAnalyzer.test(vls.username)){\r\n            return 'Not acceptable username!'\r\n        }\r\n        return ''\r\n    },\r\n    password: (vls)=>{\r\n        if(!pwdAnalyzer.test(vls.password)){\r\n            return 'Not acceptable password!'\r\n        }\r\n        return ''\r\n    },\r\n    passwordconf: (vls)=>{\r\n        if(vls.password !== vls.passwordconf \r\n            || !pwdAnalyzer.test(vls.passwordconf)){\r\n            return 'Not acceptable password confirmation!'\r\n        }\r\n        return ''\r\n    }\r\n}\r\n\r\nfunction isItPassibleDBIndex(inputID){\r\n    if(inputID.length !== 24){\r\n        return true\r\n    }\r\n    const analyzer = new RegExp(/[a-f0-9]{24}/)\r\n    return analyzer.test(inputID)\r\n}\r\n\r\nexport const reviseAutTokenExpiry = (expireDateInMs)=>{\r\n    try{\r\n        const expireDate = new Date(expireDateInMs)\r\n        const actDate = new Date()\r\n        return expireDate >= actDate\r\n    }catch(err){\r\n        return true\r\n    }\r\n}\r\n\r\nexport const revisePasswordResetToken = (token)=>{\r\n\r\n    const tokenParts = token.split('.')\r\n    return isItPassibleDBIndex(tokenParts[0]) &&\r\n        tokenParts[1] && tokenParts[2] && tokenParts[3]\r\n\r\n}","import { \r\n    convertExpiration_StrToInt, \r\n    convertExpiration_IntSecToIntMiliSec } from './dataConverting'\r\nimport { reviseAutTokenExpiry } from './dataRevision'\r\n\r\n/** __Helper local storage direct processes__ */\r\nfunction persistLocalCredentials( labels, values ){\r\n    for(let i = 0; i < labels.length; i++){\r\n        localStorage.setItem(labels[i], values[i])\r\n    }\r\n}\r\n\r\nfunction removeLocalCredentials(labels){\r\n    for(let i = 0; i < labels.length; i++){\r\n        localStorage.removeItem(labels[i])\r\n    }\r\n}\r\n\r\n\r\n/** __Helper local storage getter processes__ */\r\nexport function didUserDatasPersistLocally(){\r\n    const res = {\r\n        refreshToken: localStorage.getItem('refreshToken'),\r\n        token: localStorage.getItem('authToken'),\r\n        expireDate: localStorage.getItem('expireDate')\r\n    } \r\n    if(Object.values(res).includes(null)){\r\n        return false;\r\n    }\r\n    return res\r\n}\r\n\r\nexport function getAutorizationToken(){\r\n    return localStorage.getItem('authToken')\r\n}\r\n\r\nexport function getRefreshToken(){\r\n    return localStorage.getItem('refreshToken')\r\n}\r\n\r\nexport function didAuthTokenExpired(){\r\n    const expirStr = localStorage.getItem('expireDate')\r\n    const expireDateInMs = convertExpiration_StrToInt(expirStr)\r\n    return reviseAutTokenExpiry(expireDateInMs)\r\n}\r\n\r\n\r\n\r\n/** __Helper local storage mutation processes__ */\r\nexport function persistRefresedCredentials(authResObj){\r\n    persistLocalCredentials(\r\n        ['authToken', 'expireDate' ], \r\n        [ \r\n            authResObj.newToken, \r\n            convertExpiration_IntSecToIntMiliSec(authResObj.tokenExpire)\r\n        ]\r\n    )\r\n}\r\n\r\nexport function persistAllEssentialCredentials(userData){\r\n    persistLocalCredentials(\r\n        ['authToken', 'refreshToken', 'expireDate'],\r\n        [ \r\n            userData.token, userData.refreshToken, \r\n            convertExpiration_IntSecToIntMiliSec(userData.tokenExpire)\r\n        ]\r\n    )\r\n}\r\n\r\nexport function clearAllLocalCredentials(){\r\n    removeLocalCredentials(\r\n        ['authToken', 'refreshToken', 'expireDate']\r\n    )\r\n}\r\n\r\n","import React, { useReducer, createContext, useEffect } from 'react';\r\n\r\nimport { useLazyQuery } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag';\r\n\r\nimport { didAuthTokenExpired,\r\n    persistAllEssentialCredentials,\r\n    clearAllLocalCredentials,\r\n    didUserDatasPersistLocally    } from './localStorageProc'\r\n\r\n\r\n/** __Initialization processes at page reload__ */\r\nconst activeUserSocket = null\r\nconst initAuthState = {\r\n    user: null,\r\n    newContent: [],\r\n}\r\n\r\n\r\nconst FETCH_USER_DETAILS = gql`\r\n    query requireClientContent{\r\n        requireClientContent{\r\n            id, email, username, registeredAt, lastLoggedAt\r\n        }\r\n    }\r\n    `\r\n\r\nconst AuthContext = createContext({\r\n    user: null,\r\n    newContent: [],\r\n    srvErrMessage: '',\r\n    backPageURL: '',\r\n    login: (userData) => {},\r\n    logout: () => {},\r\n    setSrvError: (errorMsg) => {},\r\n    setBackPageURL: (url) => {}\r\n});\r\n\r\n\r\n/** __Provider and reducer for published context__ */\r\nfunction authReducer(state, action) {\r\n    switch (action.type) {\r\n        case 'LOGIN':\r\n            return {  ...state, user: action.payload  };\r\n        case 'LOGOUT':\r\n            return { ...state, user: null, newContent: []  };\r\n        case 'ERROR': \r\n            return { ...state, srvErrMessage: action.payload};\r\n        case 'URL':\r\n            return { ...state, backPageURL: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction AuthorizationProvider(props){\r\n\r\n    const [ authState, dispatch] = useReducer(authReducer, initAuthState);\r\n\r\n    const [ refetchUserDatas, { called } ] = useLazyQuery(FETCH_USER_DETAILS, {\r\n        onCompleted(data){\r\n            dispatch({ type: 'LOGIN', payload: data.requireClientContent })\r\n        },\r\n        onError(err){\r\n            console.log(err.message)\r\n        }\r\n    })\r\n\r\n    useEffect(()=>{\r\n        if(didUserDatasPersistLocally() && !authState.user && !called){\r\n            refetchUserDatas()\r\n        }\r\n    })\r\n\r\n    function login(userData) {\r\n        //these will used at HttpLink at ApolloProvider\r\n        persistAllEssentialCredentials(userData)\r\n        delete userData.token\r\n        delete userData.tokenExpire\r\n        delete userData.refreshToken\r\n\r\n        //these will user ad the app\r\n        dispatch({ type: 'LOGIN',  payload: userData });\r\n    }\r\n    function logout() {\r\n        clearAllLocalCredentials()\r\n        dispatch({ type: 'LOGOUT' });\r\n    }\r\n\r\n    function setSrvError(errorMsg){\r\n        dispatch({ type: 'ERROR', payload: errorMsg })\r\n    }\r\n    function setBackPageURL(url){\r\n        dispatch({ type: 'URL', payload: url})\r\n    }\r\n    return (\r\n        <AuthContext.Provider value={ {\r\n                user: authState.user,\r\n                newContent: authState.newContent,\r\n                srvErrMessage: authState.srvErrMessage,\r\n                backPageURL: authState.backPageURL,\r\n                login, logout, setSrvError, setBackPageURL\r\n            } }>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\nexport { AuthorizationProvider, AuthContext}\r\n","import { useState } from 'react'\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\nimport { useContext } from 'react';\r\n\r\nimport { AuthContext } from './authorization';\r\n\r\nexport const useFormUsageActions = (initValues, callbackAtSending)=>{\r\n\r\n    const [ values, setFormValues ] = useState(initValues)\r\n    const onChange = (event) =>{\r\n        setFormValues({\r\n            ...values, \r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    const onSubmit = (event)=>{\r\n        event.preventDefault();\r\n        callbackAtSending();\r\n    }\r\n    const clearFields = ()=>{\r\n        setFormValues(initValues)\r\n    }\r\n    return {\r\n        values,\r\n        onSubmit,\r\n        onChange,\r\n        clearFields\r\n    }\r\n}\r\n\r\nexport const useFormErrorActions = ()=>{\r\n\r\n    //initial value for compatibliy is always the same\r\n    const [ errors, setSomeError ] = useState({ field: [], message: [] })\r\n    //datas are comming from client validation module!\r\n    //or server result - in case of validation error\r\n    const setValidationErrors = (err)=>{\r\n        setSomeError({ field: err.field, message: err.message })\r\n    }\r\n    const setGeneralErrors = (errMsg)=>{\r\n        setSomeError({ field: [], message: [ errMsg ] })\r\n    }\r\n    const resetErrors = ()=>{\r\n        setSomeError({ field: [], message: [] })\r\n    }\r\n    return {\r\n        errors,\r\n        resetErrors,\r\n        setValidationErrors,\r\n        setGeneralErrors\r\n    }\r\n}\r\n\r\n\r\nexport const usePathGetter = ()=>{\r\n    const actLocat = useLocation()\r\n    return actLocat.pathname.split('/')\r\n}\r\n\r\nexport const useLogRestriction = (logstatePreferation, destinAtRestrict)=>{\r\n    const history = useHistory()    \r\n    const userContext = useContext(AuthContext)\r\n    if( (userContext.user && logstatePreferation === 'LOGOUT_NEEDED') ||\r\n        (!userContext.user && logstatePreferation === 'LOGIN_NEEDED') ){\r\n        history.push(destinAtRestrict)\r\n    }\r\n}\r\n\r\nexport const useCookieErrorReport = (destinAtError, progPrevDestin)=>{\r\n    const userContext = useContext(AuthContext)\r\n    const history = useHistory()\r\n    const cookies = document.cookie\r\n    if(cookies){\r\n        const cookieErrorMsg = cookies.split(';')\r\n            .find( row => row.startsWith('srverror='))\r\n            .split('=')[1]\r\n        if(cookieErrorMsg){\r\n            const txtToRender = cookieErrorMsg.split('_').join(' ')\r\n            userContext.setSrvError(txtToRender)\r\n            if(progPrevDestin){\r\n                userContext.setBackPageURL(progPrevDestin)\r\n                history.replace(progPrevDestin)\r\n            }\r\n            history.push(destinAtError)\r\n        }\r\n    }\r\n}\r\n","function InputUnit({ labeling, type, name, value, funcChange, invalidInputs }){\r\n    const errorHere = invalidInputs.field.includes(name)\r\n    return (\r\n        <label>\r\n            {labeling}{ errorHere?'**':''}\r\n            <input type={type} value={value} name={name}\r\n                onChange={funcChange} \r\n            />\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default InputUnit","const ErrorUnit = ({ text })=>{\r\n\r\n    return (\r\n        <p>{text}</p>\r\n    )\r\n}\r\n\r\nexport default ErrorUnit","import { useContext } from 'react'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag';\r\n\r\nimport { useFormUsageActions, useFormErrorActions, useLogRestriction \r\n} from '../utils/myHookFunctions'\r\nimport { localFormDataRevisions } from '../utils/dataRevision'\r\nimport { AuthContext } from '../utils/authorization';\r\nimport InputUnit from '../components/generalForm/InputUnit'\r\nimport ErrorUnit from '../components/generalForm/ErrorUnit'\r\n\r\nfunction LoginPage(){\r\n    useLogRestriction('LOGOUT_NEEDED', '/') //at logged in state redirection\r\n\r\n    const userFormValidationCrit = ['email', 'password']\r\n\r\n    const { errors, resetErrors, setValidationErrors, setGeneralErrors } = useFormErrorActions()\r\n\r\n    const { values, onSubmit, onChange } = useFormUsageActions({\r\n        email: '',\r\n        password: ''\r\n    }, userLogin)\r\n    const userContext = useContext(AuthContext)\r\n\r\n    const [ loginProcess, { loading } ] = useMutation(LOGIN_USER, {\r\n        update(_, { data: { login: userLogDatas }} ){\r\n            userContext.login(userLogDatas)\r\n            resetErrors()\r\n        },\r\n        onError(err){\r\n            console.log(err)\r\n            setGeneralErrors(err.message)\r\n        },\r\n        variables: values\r\n    })\r\n\r\n    function userLogin(){\r\n        resetErrors()\r\n        const clientErrors = localFormDataRevisions(values, userFormValidationCrit)\r\n        if(clientErrors.field.length === 0){\r\n            loginProcess()\r\n        }else{\r\n            setValidationErrors(clientErrors)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Login page</h3>\r\n            { userContext.user? <Redirect to='/' /> : <></>}\r\n            <form>\r\n                <InputUnit labeling='Email' \r\n                    type='text' invalidInputs={errors}\r\n                    name='email' value={values.email} funcChange={onChange}\r\n                />\r\n                <InputUnit labeling='Password' \r\n                    type='password' invalidInputs={errors}\r\n                    name='password' value={values.password} funcChange={onChange}\r\n                />\r\n                <input type='submit' value='Login' onClick={onSubmit}/>\r\n                { loading && <p>Under process...</p> }\r\n                { errors.message.length > 0 && errors.message.map((errMsg, index)=>{\r\n                    return <ErrorUnit key={index} text={errMsg} />\r\n                }) }\r\n            </form>\r\n            <p>\r\n                <Link to='/passwordresetting/email'>\r\n                    Did you forget the password?\r\n                </Link>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst LOGIN_USER = gql`\r\n    mutation login(\r\n        $email: String!\r\n        $password: String!\r\n    ){\r\n        login(\r\n            email: $email\r\n            password: $password\r\n        ){\r\n            id, email, username, token, tokenExpire, refreshToken, registeredAt, lastLoggedAt\r\n        }\r\n    }\r\n`\r\n\r\nexport default LoginPage","import { useContext } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Redirect } from 'react-router-dom'\r\nimport gql from 'graphql-tag';\r\n\r\nimport { useFormUsageActions, useFormErrorActions, useLogRestriction \r\n} from '../utils/myHookFunctions'\r\nimport { localFormDataRevisions } from '../utils/dataRevision'\r\nimport { AuthContext } from '../utils/authorization';\r\nimport InputUnit from \"../components/generalForm/InputUnit\"\r\nimport ErrorUnit from '../components/generalForm/ErrorUnit'\r\n\r\nfunction RegisterPage(){\r\n    useLogRestriction('LOGOUT_NEEDED', '/') //at logged in state redirection\r\n\r\n    const useFormRevisionCrit = ['email','username', 'password','passwordconf']\r\n\r\n    const { values, onSubmit, onChange } = useFormUsageActions({\r\n        email: '',\r\n        username: '',\r\n        password: '',\r\n        passwordconf: ''\r\n    }, userRegistration)\r\n\r\n    const { errors, resetErrors, setValidationErrors, setGeneralErrors } = useFormErrorActions()\r\n    const userContext = useContext(AuthContext)\r\n    const [ createUser, { loading }] = useMutation(REGISTER_USER, {\r\n        update( _, { data: { registration: userLogDatas } }){\r\n            userContext.login(userLogDatas)\r\n            resetErrors()\r\n        }, \r\n        onError(err){\r\n            setGeneralErrors(err.message)\r\n        },\r\n        variables: values\r\n    })\r\n\r\n    function userRegistration(){\r\n        resetErrors()\r\n        const clientErrors = localFormDataRevisions(values, useFormRevisionCrit)\r\n        if(clientErrors.field.length === 0){\r\n            createUser()\r\n        }else{\r\n            setValidationErrors(clientErrors)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Registration</h3>\r\n            { userContext.user? <Redirect to='/' /> : <></>}\r\n            <p>Please fill this form with some registration details.</p>\r\n            <form>\r\n                <InputUnit labeling='Email' \r\n                    type='email' invalidInputs={errors}\r\n                    name='email' value={values.email} funcChange={onChange} />\r\n                <InputUnit labeling='Username' \r\n                    type='text' invalidInputs={errors}\r\n                    name='username' value={values.username} funcChange={onChange} />\r\n                <InputUnit labeling='Password' \r\n                    type='password' invalidInputs={errors}\r\n                    name='password' value={values.password} funcChange={onChange} />\r\n                <InputUnit labeling='Confrim password' \r\n                    type='password' invalidInputs={errors}\r\n                    name='passwordconf' value={values.passwordconf} funcChange={onChange} />\r\n                <input type='submit' value='Send' onClick={onSubmit} />\r\n                {   loading && <p>Under process...</p>  }\r\n                {   errors.message.length > 0 && errors.message.map((errMsg, index)=>{\r\n                        return <ErrorUnit key={index} text={errMsg}/>}) }\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\n    mutation registration(\r\n        $email: String!,\r\n        $username: String!,\r\n        $password: String!,\r\n        $passwordconf: String!\r\n    ){\r\n        registration(\r\n            email: $email,\r\n            username: $username,\r\n            password: $password,\r\n            passwordconf: $passwordconf\r\n        ){\r\n            id, email, username, token, tokenExpire, refreshToken, registeredAt, lastLoggedAt\r\n        }\r\n    }\r\n`\r\n/*\r\n            friends{\r\n                userid, username, email\r\n            }, allPosts{\r\n                postid, createdAt, updatedAt, content, owner{\r\n                    userid, username, relation, mutualFriendCount\r\n                }, sentiments{\r\n                    sentimentid, createdAt, updatedA, content, owner{ \r\n                        userid, username, relation, mutualFriendCount }\r\n                }, comments\r\n            }, allChats{\r\n                chatid, title, startedAt, owner{\r\n                    userid, username, relation, mutualFriendCount\r\n                }\r\n            }\r\n        \r\n*/\r\nexport default RegisterPage","import gql from 'graphql-tag'\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport { \r\n    useFormUsageActions, useFormErrorActions, useLogRestriction\r\n} from '../../utils/myHookFunctions'\r\nimport { localFormDataRevisions } from '../../utils/dataRevision'\r\n\r\nimport InputUnit from '../generalForm/InputUnit'\r\nimport ErrorUnit from '../generalForm/ErrorUnit'\r\nfunction PwdResetStage1(){\r\n    useLogRestriction('LOGOUT_NEEDED', '/') //at logged in state redirection\r\n\r\n    const userFormValidationCrit = ['email']\r\n    const { errors, resetErrors, setValidationErrors, setGeneralErrors \r\n        } = useFormErrorActions()\r\n\r\n    const { values, onSubmit, onChange, clearFields \r\n        } = useFormUsageActions({ email: '' }, userResetEmail)\r\n\r\n    const [ resetStp1Process, { loading } ] = useMutation(RESET_PWD1, {\r\n        update(_, { data: { resetPasswordStep1: accountProcess }} ){\r\n            clearFields()\r\n            resetErrors()\r\n        },\r\n        onError(err){\r\n            console.log(err)\r\n            setGeneralErrors(err.message)\r\n        },\r\n        variables: values\r\n    })\r\n\r\n    function userResetEmail(){\r\n        resetErrors()\r\n        const clientErrors = localFormDataRevisions(values, userFormValidationCrit)\r\n        if(clientErrors.field.length === 0){\r\n            resetStp1Process()\r\n        }else{\r\n            setValidationErrors(clientErrors)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h4>Forgotten password resetting - sending authenticator email</h4>\r\n            <p>For resetting forgotten password, please give your email which you have been registered to the site!</p>\r\n            <p>You will get an email with a link URL, with which you can continue the forgotten password resetting process.</p>\r\n            <form>\r\n                <InputUnit labeling='Email' \r\n                    type='email' invalidInputs={errors}\r\n                    name='email' value={values.email} funcChange={onChange}\r\n                />\r\n                <input type='submit' value='Continue' onClick={onSubmit}/>\r\n                { loading && <p>Under process...</p> }\r\n                { errors.message.length > 0 && errors.message.map((errMsg, index)=>{\r\n                    return <ErrorUnit key={index} text={errMsg} />\r\n                }) }\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PwdResetStage1\r\n\r\nconst RESET_PWD1 = gql`\r\n    mutation resetPasswordStep1(\r\n        $email: String!\r\n    ){\r\n        resetPasswordStep1(\r\n            email: $email\r\n        ){\r\n            resultText, id, email, username    \r\n        }\r\n    }\r\n`","import gql from 'graphql-tag'\r\nimport { useMutation } from '@apollo/client';\r\nimport { useParams, useHistory } from 'react-router';\r\n\r\nimport { \r\n    useFormUsageActions, useFormErrorActions, \r\n    useLogRestriction, useCookieErrorReport \r\n} from '../../utils/myHookFunctions'\r\nimport { revisePasswordResetToken } from '../../utils/dataRevision'\r\nimport { localFormDataRevisions } from '../../utils/dataRevision'\r\n\r\nimport InputUnit from '../generalForm/InputUnit'\r\nimport ErrorUnit from '../generalForm/ErrorUnit'\r\nfunction PwdResetStage2(){\r\n\r\n    //at logged in state redirection\r\n    useLogRestriction('LOGOUT_NEEDED', '/') \r\n    //GET response server error case\r\n    useCookieErrorReport('/error', '/passwordresetting/email') \r\n    \r\n    const routeHistory = useHistory()\r\n    const routeParam = useParams()\r\n    if(!revisePasswordResetToken(routeParam.token)){ \r\n        routeHistory.push('/') \r\n    }\r\n\r\n    const userFormValidationCrit = ['password', 'passwordconf']\r\n    const { \r\n        errors, resetErrors, setValidationErrors, setGeneralErrors \r\n    } = useFormErrorActions()\r\n    const { \r\n        values, onSubmit, onChange, clearFields \r\n    } = useFormUsageActions(\r\n        { password: '', passwordconf: '' }, userResetEmail)\r\n\r\n    const [ resetStp1Process, { loading } ] = useMutation(RESET_PWD1, {\r\n        update(_, { data: { resetPasswordStep3: accountProcess }} ){\r\n            resetErrors()\r\n            clearFields()\r\n            routeHistory.replace('/passwordresetting/result')\r\n        },\r\n        onError(err){\r\n            console.log(err)\r\n            setGeneralErrors(err.message)\r\n        },\r\n        variables: values,\r\n        context: {\r\n            headers: { resetting: routeParam.token }\r\n        }\r\n    })\r\n\r\n    function userResetEmail(){\r\n        resetErrors()\r\n        const clientErrors = localFormDataRevisions(values, userFormValidationCrit)\r\n        if(clientErrors.field.length === 0){\r\n            resetStp1Process()\r\n        }else{\r\n            setValidationErrors(clientErrors)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h4>Forgotten password resetting - new password setting</h4>\r\n            <p>Please give a new password to your account and its repeat as confirmation!.</p>\r\n            <form>\r\n                <InputUnit labeling='New Password' \r\n                    type='password' invalidInputs={errors}\r\n                    name='password' value={values.password} \r\n                    funcChange={onChange}\r\n                />\r\n                <InputUnit labeling='Confirm password' \r\n                    type='password' invalidInputs={errors}\r\n                    name='passwordconf' value={values.passwordConfirm} \r\n                    funcChange={onChange}\r\n                />\r\n                <input type='submit' value='Change password' onClick={onSubmit}/>\r\n                { loading && <p>Under process...</p> }\r\n                { errors.message.length > 0 && errors.message.map((errMsg, index)=>{\r\n                    return <ErrorUnit key={index} text={errMsg} />\r\n                }) }\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PwdResetStage2\r\n\r\nconst RESET_PWD1 = gql`\r\n    mutation resetPasswordStep3(\r\n        $password: String!\r\n        $passwordconf: String!\r\n    ){\r\n        resetPasswordStep3(\r\n            newpassword: $password,\r\n            newconf: $passwordconf\r\n        ){\r\n            resultText, id, email, username    \r\n        }\r\n    }\r\n`","import { useContext } from 'react'\r\n\r\nimport { useLogRestriction } from '../../utils/myHookFunctions'\r\nimport { AuthContext } from '../../utils/authorization'\r\n\r\nfunction PwdResetStage3(){\r\n    useLogRestriction('LOGOUT_NEEDED', '/') //at logged in state redirection\r\n\r\n    return (\r\n        <div>\r\n            <h4>Your Forgotten Password has been resetted!</h4>\r\n            <p>A minute later you can use your new password!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PwdResetStage3","import React from \"react\";\r\nimport { Switch, Route, Redirect, useRouteMatch } from 'react-router-dom'\r\n\r\nimport PwdResetStage1 from '../components/outContent/PwdResetStage1'\r\nimport PwdResetStage2 from '../components/outContent/PwdResetStage2'\r\nimport PwdResetStage3 from '../components/outContent/PwdResetStage3'\r\n\r\nimport { usePathGetter } from '../utils/myHookFunctions'\r\n\r\nfunction PwdResetPage(){\r\n    const { path, url } = useRouteMatch()\r\n    return (\r\n        <div>\r\n            <h3>Forgotten password resetting page</h3>\r\n            <Switch>\r\n                <Route path={ `${path}/email` }>\r\n                    <PwdResetStage1 />\r\n                </Route>\r\n                <Route path={ `${path}/result` }>\r\n                    <PwdResetStage3 />\r\n                </Route>\r\n\r\n                {/* for server GET response only */}\r\n                <Route path={ `${path}/:token` }>\r\n                    <PwdResetStage2 />\r\n                </Route>\r\n                {/* for no match case */}\r\n                <Redirect from={`${url}`} to='/' />\r\n            </Switch>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default PwdResetPage\r\n","function WellcomeContent(){\r\n    return (\r\n        <div>Wellcome this site!</div>\r\n    )\r\n}\r\n\r\nexport default WellcomeContent","import { useContext, useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport { AuthContext } from '../../utils/authorization'\r\n\r\nfunction LogoutProcess(){\r\n    const userContext = useContext(AuthContext)\r\n    useEffect(()=>{\r\n        userContext.logout()\r\n    })\r\n    return (\r\n        <Redirect to='/' />\r\n    )\r\n}\r\nexport default LogoutProcess","function ReviviewContent(){\r\n    return (\r\n        <div>\r\n            <h3>Review content</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReviviewContent","function ChatsList(){\r\n    return (\r\n        <div>\r\n            <h3>Chattings</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatsList","function MyAccount(){\r\n    return (\r\n        <div>\r\n            <h3>Account dashboard</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyAccount","function FriendsList(){\r\n    return (\r\n        <div>\r\n            <h3>Friends</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FriendsList","function PostsList(){\r\n    return (\r\n        <div>\r\n            <h3>Posts</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostsList","import { useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { AuthContext } from '../utils/authorization'\r\n\r\nfunction ServerErrorPage(){\r\n    const userContext = useContext(AuthContext)\r\n    const routeHistory = useHistory()\r\n    const clickAction = (e)=>{\r\n        e.preventDefault()\r\n        //userContext.srvError('')\r\n        if(e.target.value === 'Homepage'){\r\n            routeHistory.push('/')\r\n        }\r\n        if(e.target.value === 'Back'){\r\n            routeHistory.push(userContext.backPageURL)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h4>Something went wrong!</h4>\r\n            <p>{userContext.srvErrMessage}</p>\r\n            <input type='submit' value='Homepage' onClick={clickAction} />\r\n            <input type='submit' value='Back' onClick={clickAction} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ServerErrorPage","import React from \"react\";\r\nimport { useContext }  from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\n\r\nimport { AuthContext } from '../utils/authorization'\r\n\r\nimport LoginPage from '../pages/LoginPage';\r\nimport RegisterPage from '../pages/RegisterPage';\r\nimport PwdResetPage from '../pages/PwdResetPage';\r\nimport WellcomeContent from '../components/outContent/WellcomeContent'\r\n\r\nimport LogoutProcess from '../components/inContent/LogoutProcess'\r\nimport ReviviewContent from \"../components/inContent/ReviewContent\";\r\nimport ChatsList from '../components/inContent/ChatsList'\r\nimport MyAccount from '../components/inContent/MyAccount'\r\nimport FriendList from '../components/inContent/FriendsList'\r\nimport PostsList from '../components/inContent/PostsList'\r\nimport ServerErrorPage from \"./ServerErrorPage\";\r\n\r\nfunction HomePage(){\r\n   const userContext = useContext(AuthContext)\r\n   return (\r\n      <>\r\n         { userContext.user ? <Switch>\r\n            <Route path='/logout' component={LogoutProcess} />\r\n            <Route path={`/account`} component={MyAccount} />\r\n            <Route path={`/friends`} component={FriendList}/>\r\n            <Route path={`/posts`} component={PostsList} />\r\n            <Route path={`/chats`} component={ChatsList} /> \r\n            <Route path='/' component={ReviviewContent} />\r\n         </Switch> : <Switch>\r\n            <Route exact path='/login' component={ LoginPage } />\r\n            <Route exact path='/registration' component={ RegisterPage } />\r\n            <Route path='/passwordresetting' component={ PwdResetPage } />\r\n            <Route path='/error' component={ServerErrorPage} />\r\n            <Route path='/' component={ WellcomeContent } />\r\n         </Switch>}\r\n      </>\r\n   )\r\n}\r\n\r\nexport default HomePage","import React from \"react\";\r\nimport { useContext, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { AuthContext } from '../utils/authorization'\r\nimport { usePathGetter } from '../utils/myHookFunctions'\r\n\r\nfunction Navigation(){\r\n    const userContext = useContext(AuthContext)\r\n    const [ firstPathUnit ] = usePathGetter()\r\n    const [ activeLink, setActiveLink ] = useState({  active: firstPathUnit.toLowerCase() })\r\n    return (\r\n        <nav>\r\n            {userContext.user? <>\r\n                <li>\r\n                    <Link to='/account'>My account</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to='/friends'>Friends</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to='/posts'>Posts</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to='/chats'>Chatting</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to='/logout'>Logout</Link>\r\n                </li>\r\n            </> : <>\r\n                <li>\r\n                    <Link to='/login'>Login</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to='/registration'>Registration</Link>\r\n                </li>\r\n            </> }\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation","import React, { useEffect } from \"react\";\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nimport HomePage from './pages/HomePage'\r\nimport { AuthorizationProvider } from './utils/authorization'\r\nimport Navigation from './components/Navigation';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n   useEffect(()=>{\r\n      reportWebVitals()\r\n   })\r\n   return (\r\n      <div className=\"App\">\r\n         <header className=\"App-header\">\r\n            <h1>Cultural spot</h1>\r\n         </header>\r\n         <AuthorizationProvider>\r\n            <BrowserRouter>\r\n               <Navigation />\r\n               <HomePage />\r\n            </BrowserRouter>\r\n         </AuthorizationProvider>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport App from './App';\r\nimport ApolloClient  from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { ApolloLink, from } from 'apollo-link'\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\n//import { setContext } from 'apollo-link-context';\r\n\r\nimport { \r\n   getAutorizationToken, getRefreshToken\r\n   } from './utils/localStorageProc'\r\n\r\nconst httpLink = createHttpLink({\r\n   //uri: 'https://infinite-ridge-04284.herokuapp.com/graphql'\r\n   uri: 'http://localhost:4040/graphql'\r\n});\r\n\r\nconst headerSetting = new ApolloLink((operation, forward)=>{\r\n   \r\n   if(operation.getContext('refreshing')){\r\n      operation.setContext(({ headers = {} }) => ({\r\n         headers: {\r\n           ...headers,\r\n           refreshing: getRefreshToken() || null,\r\n         }\r\n      }));\r\n   }\r\n   operation.setContext(({ headers = {} }) => ({\r\n      headers: {\r\n         ...headers,\r\n         authorization: 'Bearer ' + (getAutorizationToken() || ''),\r\n      }\r\n   }));\r\n\r\n\r\n   return forward(operation);\r\n})\r\n\r\nconst headerAbsorb = new ApolloLink((operation, forward)=>{\r\n   return forward(operation).map(data=>{\r\n\r\n\r\n      return data\r\n   });\r\n})\r\n\r\n/*\r\nconst authLink = setContext(() => {\r\n   return {\r\n      headers: {\r\n         Authorization: `Bearer ${getAutorizationToken()}`\r\n      }\r\n   };\r\n});\r\n\r\nconst refreshLink = setContext((request) => {\r\n   delete request.headers.Authorization\r\n   return {\r\n      headers: {\r\n         Refreshing: `${getRefreshToken()}`\r\n      }\r\n   };\r\n});\r\n*/\r\n\r\nconst client = new ApolloClient({\r\n   //link: authLink.concat(httpLink),\r\n   link: from([headerSetting, headerAbsorb, httpLink]),\r\n   cache: new InMemoryCache()\r\n});\r\n  \r\nexport default (\r\n   <ApolloProvider client={client}>\r\n      <App />\r\n   </ApolloProvider>\r\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ApolloProvider from './ApolloProvider'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    ApolloProvider,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}